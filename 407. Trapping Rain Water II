## 407. Trapping Rain Water II
```java
Given an m x n matrix of positive integers representing the height of each unit cell in a 2D elevation map, compute the volume of water it is able to trap after raining.

 

Note:

Both m and n are less than 110. The height of each unit cell is greater than 0 and is less than 20,000.

 

Example:

Given the following 3x6 height map:
[
  [1,4,3,1,3,2],
  [3,2,1,3,2,4],
  [2,3,3,2,3,1]
]

Return 4.
```

### Solution
- bfs + priority queue + math
- math part is hard to think out. So math thought is we checking each level from 1 to n in the min heap and that guartines that it always 
  give us the right result
```
class Solution {
    class Point{
        public int index;
        public int value;
        Point(int index, int value){
            this.index = index;
            this.value = value;
        }
        // //test 
        // public void test(){
        //     System.out.println("wei");
        // }
    }
    public int trapRainWater(int[][] heightMap) {
        //put all the edge into priorityqueue
        //checking from 1 to n and use bfs
        //note: when to count trapped water
       
        int rows = heightMap.length;
        if(rows==0) return 0;
        int cols = heightMap[0].length;
        PriorityQueue<Point> pq = new PriorityQueue<Point>((p1, p2) -> p1.value - (p2.value));
        boolean[][] visited = new boolean[rows][cols];
        for(int i = 0; i<rows; i++){
            for(int j = 0; j<cols; j++){
                visited[i][j] = false;
            }
        }
        for(int i = 0; i<rows; i++){
            for(int j = 0; j<cols; j++){
                if(i==0 || i==heightMap.length-1 || j==0 || j==heightMap[0].length-1){
                    pq.offer(new Point( i*cols+j, heightMap[i][j]));
                    visited[i][j] = true;
                    
                }
            }
        }
        
        int[][] dirs = {{0,-1},{-1,0},{0,1},{1,0}};
        
        int max = 0;
        int res = 0;
        while(!pq.isEmpty()){
            Point temp = pq.poll();
            int r = temp.index/cols;
            int c = temp.index%cols;
            max = Math.max(max, temp.value);
            for(int i = 0; i<dirs.length; i++){
                int x = r+dirs[i][0];
                int y = c+dirs[i][1];
                if(x < 0 || y < 0 || x>=rows || y>=cols) continue;
                if(visited[x][y]) continue;
                
                if(max > heightMap[x][y]) {
                    res = res + (max- heightMap[x][y]);
                }
                visited[x][y] = true;
                pq.offer(new Point(x*cols+y, heightMap[x][y]));
                //System.out.println("res: "+res);
            }
        }
        return res;
    }
}
```

### Reference
- good images tutorial https://www.cnblogs.com/grandyang/p/5928987.html
