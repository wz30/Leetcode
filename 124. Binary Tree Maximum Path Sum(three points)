/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    int result = Integer.MIN_VALUE;
    public int maxPathSum(TreeNode root) {
        if(root == null) return 0;
        maxPath(root);
        return result;
    }
    public int maxPath(TreeNode node) {
        if(node == null) return 0;
        
        int left =Math.max(0,maxPath(node.left)); 
        int right = Math.max(0,maxPath(node.right));
        result = result>(left+right+node.val)?result:(left+right+node.val);
        
        return Math.max(left,right)+node.val;
    }
}

//1.how to deal with -3(negative number)
//2.how to deal with Math.max(left,right)+node.val; (choose one way)
//3.how to deal with the [2,-1] 
