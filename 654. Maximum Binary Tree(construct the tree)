/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    //int index = 0;
    public TreeNode constructMaximumBinaryTree(int[] nums) {
        if(nums.length == 0) return null;
        return construct(nums,0,nums.length-1);
    }
    public TreeNode construct(int nums[],int begin, int end) {
        if(begin>end) return null;
        
        int max = getMax(nums,begin,end);
        TreeNode root = new TreeNode(max);
        int index = getIndex(nums,begin,end,max);
        //System.out.println(max);
        
        root.left = construct(nums,begin,index-1);
        root.right = construct(nums,index+1,end);
            
        return root; 
    }
    public int getIndex(int nums[],int begin, int end, int max) {
        int  index = 0;
        for(int i = begin; i <= end; i++) {
            if(max == nums[i]) {
                index = i;
                break;
            }
        }
        return index;
    }
    
    public int getMax(int nums[],int begin, int end) {
        int res = Integer.MIN_VALUE;
        for(int i = begin; i <= end; i++) {
            if(res < nums[i]) {
                res = nums[i];
                //index = i;
            }
        }
        return res;
    }
    
}

//construct the tree
//model with the
/*
public TreeNode construct(int nums[],int begin, int end) {
        if(begin>end) return null;
        
        int max = getMax(nums,begin,end);
        TreeNode root = new TreeNode(max);
        int index = getIndex(nums,begin,end,max);
        //System.out.println(max);
        
        root.left = construct(nums,begin,index-1);
        root.right = construct(nums,index+1,end);
            
        return root; 
    }
*/
