Given an array of characters, compress it in-place.

The length after compression must always be smaller than or equal to the original array.

Every element of the array should be a character (not int) of length 1.

After you are done modifying the input array in-place, return the new length of the array.

 
Follow up:
Could you solve it using only O(1) extra space?

 
Example 1:

Input:
["a","a","b","b","c","c","c"]

Output:
Return 6, and the first 6 characters of the input array should be: ["a","2","b","2","c","3"]

Explanation:
"aa" is replaced by "a2". "bb" is replaced by "b2". "ccc" is replaced by "c3".
 

Example 2:

Input:
["a"]

Output:
Return 1, and the first 1 characters of the input array should be: ["a"]

Explanation:
Nothing is replaced.
 

Example 3:

Input:
["a","b","b","b","b","b","b","b","b","b","b","b","b"]

Output:
Return 4, and the first 4 characters of the input array should be: ["a","b","1","2"].

Explanation:
Since the character "a" does not repeat, it is not compressed. "bbbbbbbbbbbb" is replaced by "b12".
Notice each digit has it's own entry in the array.
 

Note:

All characters have an ASCII value in [35, 126].
1 <= len(chars) <= 1000.

Three pointers:
class Solution {
    public int compress(char[] chars) {
        //two pointers i: start character, j first of new charscter
        //cur pointer for new chars
        //two pointer does not work and can not cover a lot of cases
        //then you need three pointers
        int cur = 0;
        int n = chars.length;
        for(int i = 0, j = 0; i < n; i=j){//why not j < n, why i=j
            //move j to the first differtnt character
            while(j<n && chars[j]==chars[i]) j++;
            chars[cur++] = chars[i];
            //if -- not adding num
            if(j-i==1) continue;
            //else -- adding num
            char[] charArray = String.valueOf(j-i).toCharArray();
            for(int k = 0; k<charArray.length; k++){
                chars[cur++] = charArray[k];
            }
        }
        return cur;
    }
}

What is time complexixity and space
