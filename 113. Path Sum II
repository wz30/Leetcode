/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    List<List<Integer>> res = new ArrayList<List<Integer>>();
    public List<List<Integer>> pathSum(TreeNode root, int sum) {
        if(root == null) return res;
        
        
        Stack<Integer> stack = new Stack<>();
        cal(sum, root, stack);
        return res;
    }
    public void cal(int sum, TreeNode node,  Stack<Integer> stack){
        stack.push(node.val);
        
        if(node.left==null&&node.right==null){ //reach the bottom
            if(sum == node.val) res.add(new ArrayList<Integer>(stack)); //stack to list
        } 
        
        if(node.left!=null) cal(sum - node.val,node.left, stack);
        if(node.right!=null) cal(sum - node.val,node.right, stack);
        stack.pop(); //if push -- pop
    }
    
    
    
}

//construct res.add(new ArrayList<Integer>(stack));  stack to list;
//dfs 
//sum - val
/*
            Collection                Map
         /     /    \      \            |
        /      /      \     \           |
     Set    List    Queue  Dequeue   SortedMap
     /
    /
 SortedSet 
            Core Interfaces in Collections

Note that this diagram shows only core interfaces.  
Collection : Root interface with basic methods like add(), remove(), 
             contains(), isEmpty(), addAll(), ... etc.
 
Set : Doesn't allow duplicates. Example implementations of Set 
      interface are HashSet (Hashing based) and TreeSet (balanced
      BST based). Note that TreeSet implements SortedSet.

List : Can contain duplicates and elements are ordered. Example
       implementations are LinkedList (linked list based) and
       ArrayList (dynamic array based)

Queue : Typically order elements in FIFO order except exceptions
        like PriorityQueue.  

Deque : Elements can be inserted and removed at both ends. Allows
        both LIFO and FIFO. 

Map : Contains Key value pairs. Doesn't allow duplicates.  Example
      implementation are HashMap and TreeMap. 
      TreeMap implements SortedMap.        

The difference between Set and Map interface is, in Set we have only
keys, but in Map, we have key value pairs.
*/
