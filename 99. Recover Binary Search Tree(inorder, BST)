/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    TreeNode firstEle = null;
    TreeNode secEle = null;
    TreeNode preEle =new TreeNode(Integer.MIN_VALUE); // -2...8
    
    public void recoverTree(TreeNode root) {
        if(root == null) return ;
        if(root.left == null && root.right == null) return ;
        
        //general way ()
        inOrder(root);
        
        //after the in orer traverse, we get the two pointer 
        int temp = firstEle.val;
        firstEle.val = secEle.val;
        secEle.val = temp;
 
    }
    
    //compare the current node and its rightest node left subtree and then the right subtree
    public void inOrder(TreeNode node) {
        if(node == null) return;
        
        inOrder(node.left);  //total two points 1.find the bottom node 2. get 
        //inorder middle
        //find the first element
        if(firstEle == null && node.val < preEle.val) //6>3
            firstEle = preEle;
            
        //find the second
        if(firstEle != null && node.val < preEle.val) // 5>2
            secEle = node;
        //**********
        preEle = node;
        
        inOrder(node.right);
    }
}

//anaylze with BST
//1.inorder: 123456789 the ascending order (or can in  descending order)
//this problem: 
//1.use two pointer for the incorrect position
//e.g.6, 3, 4, 5, 2(2,3,4,5,6)

//? is there same elements in BST  qa: yes and two approaches
//1. e.g. 223456
//2. e.g. 2(2)3(1)4(1)5(1)6(1)
//why use preEle not afterEle:
