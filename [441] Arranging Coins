/*
 * @lc app=leetcode id=441 lang=java
 *
 * [441] Arranging Coins
 *
 * https://leetcode.com/problems/arranging-coins/description/
 *
 * algorithms
 * Easy (37.55%)
 * Total Accepted:    64.8K
 * Total Submissions: 172.5K
 * Testcase Example:  '5'
 *
 * You have a total of n coins that you want to form in a staircase shape,
 * where every k-th row must have exactly k coins.
 * ⁠
 * Given n, find the total number of full staircase rows that can be formed.
 * 
 * n is a non-negative integer and fits within the range of a 32-bit signed
 * integer.
 * 
 * Example 1:
 * 
 * n = 5
 * 
 * The coins can form the following rows:
 * ¤
 * ¤ ¤
 * ¤ ¤
 * 
 * Because the 3rd row is incomplete, we return 2.
 * 
 * 
 * 
 * Example 2:
 * 
 * n = 8
 * 
 * The coins can form the following rows:
 * ¤
 * ¤ ¤
 * ¤ ¤ ¤
 * ¤ ¤
 * 
 * Because the 4th row is incomplete, we return 3.
 * 
 * 
 */
class Solution {
    public int arrangeCoins(int n) {
        int i = 0;
        long tot = 0;
        for(i = 1; i<=n; i++)
        {
            tot+=i;
            if(tot>n) break;
        }
        //5: 2
        //6: 3
        return i-1;
    }
}


//1. tot and n (5 and 6 as example)
//2. overflow leads tle
//when there is acculate or total, oerflow!
