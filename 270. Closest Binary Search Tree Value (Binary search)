Given a non-empty binary search tree and a target value, find the value in the BST that is closest to the target.

Note:

Given target value is a floating point.
You are guaranteed to have only one unique value in the BST that is closest to the target.
Example:

Input: root = [4,2,5,1,3], target = 3.714286

    4
   / \
  2   5
 / \
1   3

Output: 4

There are couple ways to solve the issues.

# Analysis 
- bs feature are the bst
- Using the feature directly would be the most efficient way to solve the probelsm
- Others are like convert to an array and binary search, whcih is ok but not efficient and break the nature feature from bst

# solution 1: sovle by while loop, directly get value

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public int closestValue(TreeNode root, double target) {
        int res = root.val;
        //find first element greater than it
        //edge case: 1,2 1000
        //           3,4 1 
        TreeNode cur = root;
        while(cur!=null){
            //update res by close difference
            if(Math.abs(res - target) >=Math.abs(target - cur.val))
               res = cur.val;
            
            cur = cur.val > target ? cur.left : cur.right;
        }
        
        return res;
    }
}

# solution 2: stack
