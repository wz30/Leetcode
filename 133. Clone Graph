/**
 * Definition for undirected graph.
 * class UndirectedGraphNode {
 *     int label;
 *     List<UndirectedGraphNode> neighbors;
 *     UndirectedGraphNode(int x) { label = x; neighbors = new ArrayList<UndirectedGraphNode>(); }
 * };
 */
public class Solution {
    Map<Integer, UndirectedGraphNode> map = new HashMap<>();
    public UndirectedGraphNode cloneGraph(UndirectedGraphNode node) {
        if(node == null) return null;
        return clone(node);
    }
    
    UndirectedGraphNode clone(UndirectedGraphNode node) {
        //boundary case
        if(node == null) return null; 
        
        if(map.containsKey(node.label)) 
            return map.get(node.label);
        
        //clone the node
        UndirectedGraphNode clone = new UndirectedGraphNode(node.label);
        map.put(clone.label, clone);  
        for(UndirectedGraphNode  neighbour : node.neighbors) {
            clone.neighbors.add(clone(neighbour));  //use the clone function
        }
        
        return clone;
    }
}

//dfs + hashmap
//0 1,2
//1 2,0
//2 2,0,1
