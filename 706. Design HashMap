Design a HashMap without using any built-in hash table libraries.

To be specific, your design should include these functions:

put(key, value) : Insert a (key, value) pair into the HashMap. If the value already exists in the HashMap, update the value.
get(key): Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key.
remove(key) : Remove the mapping for the value key if this map contains the mapping for the key.

Example:

MyHashMap hashMap = new MyHashMap();
hashMap.put(1, 1);          
hashMap.put(2, 2);         
hashMap.get(1);            // returns 1
hashMap.get(3);            // returns -1 (not found)
hashMap.put(2, 1);          // update the existing value
hashMap.get(2);            // returns 1 
hashMap.remove(2);          // remove the mapping for 2
hashMap.get(2);            // returns -1 (not found) 

Note:

All keys and values will be in the range of [0, 1000000].
The number of operations will be in the range of [1, 10000].
Please do not use the built-in HashMap library.

-----------------------------------------------------------------------
why we have hashmap---O(1), merge the advantage of array and list
good refernece for hashcode and equals: https://blog.csdn.net/justloveyou_/article/details/52464440
equals: compare reference, hashcode and content.

Solution:
class MyHashMap {
    class ListNode {
        int key;
        int val;
        ListNode next;
        ListNode(int key, int val){
            this.key = key;
            this.val = val;
        }
    }
    //using linked list
    ListNode[] nodes;

    /** Initialize your data structure here. */
    public MyHashMap() {
        nodes =  new ListNode[10000];
    }
    
    /** value will always be non-negative. */
    //list is empty -> 
    public void put(int key, int value) {
        int i = hash(key);
        if(nodes[i]==null){
            nodes[i] = new ListNode(-1, -1);
        }
        
        //three cases to care
        //1. empty node list
        //2. same key there
        //3. new key vlaue pair
        ListNode prev = find(nodes[i], key);
        if(prev.next==null){
            prev.next = new ListNode(key, value);
        }else{
            prev.next.val = value;
        }
    }
    
    public ListNode find(ListNode head, int key){
        ListNode temp = head;
        ListNode prev = null;
        while(temp != null && temp.key!=key){
            prev = temp;
            temp = temp.next;
        }
        return prev;
    }
    /** Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key */
    public int get(int key) {
        int i = hash(key);
        if(nodes[i]==null) return -1;
        ListNode node = find(nodes[i], key);
        return node.next == null ? -1 : node.next.val;
    }
    
    /** Removes the mapping of the specified value key if this map contains a mapping for the key */
    public void remove(int key) {
        int i = hash(key);
        if (nodes[i] == null) {
            return;
        }
        ListNode prev = find(nodes[i], key);
        if (prev.next == null) {
            return;
        }
        prev.next = prev.next.next;
    }
    
    int hash(int key){
        return key%(nodes.length);
    }
}

/**
 * Your MyHashMap object will be instantiated and called as such:
 * MyHashMap obj = new MyHashMap();
 * obj.put(key,value);
 * int param_2 = obj.get(key);
 * obj.remove(key);
 */
