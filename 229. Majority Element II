## 229. Majority Element II

### Solution 1
- Moore agorithm, But it is just for one, we have two majority elemnt here
- So, we need two sets of varibale and more importantly, accumulate counter first and replace a new value
```java
class Solution {
    public List<Integer> majorityElement(int[] nums) {
        //at most 2 ï¼Œ proof by contracdication
        int res1=0, res2 = 0, counter1=0, counter2 = 0;
        //waht if res1 and res2 are the same
        //accumulate them first and change new number
        for(int i = 0; i<nums.length; i++){
            
                if(res1==nums[i]){
                    counter1++;
                }else if(res2 == nums[i]){
                    counter2++;
                }else if(counter1==0){
                    res1=nums[i];
                    counter1++;
                }else if(counter2==0){
                    res2 = nums[i];
                    counter2++;
                }else{
                    counter1--;
                    counter2--;
                }
            
        }
        //double check if res1 and res2 are true since whatever case, moore algorithm always return some values;
        counter1 =0;
        counter2 = 0;
        for(int i=0; i<nums.length; i++){
            if(res1==nums[i]) counter1++;
            else if(res2==nums[i]) counter2++;
        }
        List<Integer> list = new ArrayList<>();
        
        if(counter1>(nums.length/3)) list.add(res1);
        if(counter2>(nums.length/3)) list.add(res2);
        return list;
    }
}
```
